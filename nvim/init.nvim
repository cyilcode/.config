set nu rnu

set nocompatible              " be iMproved, required
filetype off                  " required

let mapleader =" "
call plug#begin()

Plug 'OmniSharp/omnisharp-vim'
" {{{
	let g:OmniSharp_server_path = '/home/cyil/.vscode/extensions/ms-vscode.csharp-1.21.12/.omnisharp/1.34.13/run'
	let g:OmniSharp_server_stdio = 1
	let g:OmniSharp_highlight_types = 3

	set completeopt=longest,menuone,preview
	set previewheight=5
	nnoremap <Leader>. :OmniSharpGetCodeActions<CR>
	xnoremap <Leader>. :call OmniSharp#GetCodeActions('visual')<CR>
	nnoremap <Leader>kf :OmniSharpCodeFormat<CR>
	nnoremap gd :OmniSharpFindImplementations<CR>
" }}}

Plug 'w0rp/ale'
" {{{
	let g:ale_linters = { 'cs': ['OmniSharp'] }
" }}}

Plug 'markwoodhall/vim-codelens'
" {{{
	let g:codelens_show_references = 1
	let g:codelens_show_tests = 1
" }}}

Plug 'elixir-editors/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
" { 
	nnoremap <silent> <leader><space> :FZF<CR>
  	nnoremap <silent> <leader>b :Buffers<CR>
	let g:fzf_nvim_statusline = 0 " disable statusline overwriting
" }

Plug 'unblevable/quick-scope'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdtree'
" {{{
  let g:NERDTreeMinimalUI = 1
  let g:NERDTreeHijackNetrw = 0
  let g:NERDTreeWinSize = 31
  let g:NERDTreeChDirMode = 2
  let g:NERDTreeAutoDeleteBuffer = 1
  let g:NERDTreeShowBookmarks = 1
  let g:NERDTreeCascadeOpenSingleChildDir = 1

  map <F2> :NERDTreeToggle<CR>
" }}}

" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/limelight.vim'
" {{{
  	let g:limelight_default_coefficient = 0.7
	let g:limelight_conceal_ctermfg = 238
	nmap <silent> gl :Limelight!!<CR>
	xmap gl <Plug>(Limelight)
" }}}

" Completion
" ====================================================================
Plug 'Valloric/YouCompleteMe', { 'do': 'python2 install.py --tern-completer' }
" {{{
	let g:ycm_autoclose_preview_window_after_completion = 1
	let g:ycm_seed_identifiers_with_syntax = 1
	let g:ycm_collect_identifiers_from_tags_files = 1
	let g:ycm_key_invoke_completion = '<c-j>'
	let g:ycm_complete_in_strings = 1
" }}}

Plug 'SirVer/ultisnips'
" {{{
  nnoremap <leader>se :UltiSnipsEdit<CR>

  let g:UltiSnipsSnippetsDir = '~/.nvim/UltiSnips'
  let g:UltiSnipsEditSplit = 'horizontal'
  let g:UltiSnipsListSnippets = '<nop>'
  let g:UltiSnipsExpandTrigger = '<c-l>'
  let g:UltiSnipsJumpForwardTrigger = '<c-l>'
  let g:UltiSnipsJumpBackwardTrigger = '<c-b>'
  let g:ulti_expand_or_jump_res = 0
" }}}

Plug 'honza/vim-snippets'
call plug#end()
filetype plugin indent on
set rtp+=/usr/bin/fzf

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

let g:airline_powerline_fonts = 1
